<b>FP trivia</b> is a <a href="/wiki/Pointfree_programming">pointfree programming</a> language<a href="#cite_note-1"></a><a href="#cite_note-2"></a>  inspired by <a href="http://en.wikipedia.org/wiki/FP_(programming_language)">FP</a> of <a href="http://en.wikipedia.org/wiki/John_Backus">John Backus</a>, <a href="/wiki/APL">APL</a>, <a href="http://en.wikipedia.org/wiki/Smalltalk">Smalltalk</a> and <a href="/wiki/Lisp">Lisp</a>. It is intended to remedy the problematic fact that FP<a href="#cite_note-3"></a> is <b>viewed as free of variables</b>,<a href="#cite_note-4"></a><a href="#cite_note-5"></a><a href="#cite_note-6"></a> which is also true in terms of <a href="/wiki/Lambda_calculus">lambda</a> variables, but not in terms of the <a href="http://en.wikipedia.org/wiki/Instance_variable">instance variables</a> that are used by FP trivia.<a href="#cite_note-7"></a> The main data type is therefore a <a href="http://en.wikipedia.org/wiki/key%E2%80%93value_database">table</a> that the instance variables can access. It should not be forgotten that one motivation for creating FP was the use of an "Algebra of Programming".<a href="#cite_note-8"></a><a href="#cite_note-9"></a>

A table is a linear arrangement of <a href="http://en.wikipedia.org/wiki/attribute%E2%80%93value_pair">keyâ€“value pairs</a> similar to a <a href="http://en.wikipedia.org/wiki/Linked_list">linked list</a>.

An instance variable can then access a certain key and pick out the associated value.
